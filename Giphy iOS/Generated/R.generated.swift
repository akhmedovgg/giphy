//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 5 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// Value: Cancel
      ///
      /// Key: CANCEL
      var canceL: RswiftResources.StringResource { .init(key: "CANCEL", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Close
      ///
      /// Key: CLOSE
      var closE: RswiftResources.StringResource { .init(key: "CLOSE", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Copied
      ///
      /// Key: COPIED
      var copieD: RswiftResources.StringResource { .init(key: "COPIED", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Copy GIF
      ///
      /// Key: COPY_GIF
      var copy_GIF: RswiftResources.StringResource { .init(key: "COPY_GIF", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// Value: Copy GIF link
      ///
      /// Key: COPY_GIF_LINK
      var copy_GIF_LINK: RswiftResources.StringResource { .init(key: "COPY_GIF_LINK", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 6 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `Black`.
    var black: RswiftResources.ColorResource { .init(name: "Black", path: [], bundle: bundle) }

    /// Color `Eerie Black`.
    var eerieBlack: RswiftResources.ColorResource { .init(name: "Eerie Black", path: [], bundle: bundle) }

    /// Color `Interdimensional Blue`.
    var interdimensionalBlue: RswiftResources.ColorResource { .init(name: "Interdimensional Blue", path: [], bundle: bundle) }

    /// Color `Metallic Violet`.
    var metallicViolet: RswiftResources.ColorResource { .init(name: "Metallic Violet", path: [], bundle: bundle) }

    /// Color `White`.
    var white: RswiftResources.ColorResource { .init(name: "White", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 0 images, and 2 namespaces.
  struct image {
    let bundle: Foundation.Bundle
    var icons: icons { .init(bundle: bundle) }
    var logotype: logotype { .init(bundle: bundle) }

    func icons(bundle: Foundation.Bundle) -> icons {
      .init(bundle: bundle)
    }
    func logotype(bundle: Foundation.Bundle) -> logotype {
      .init(bundle: bundle)
    }


    /// This `_R.image.icons` struct is generated, and contains static references to 0 iconss, and 1 namespaces.
    struct icons {
      let bundle: Foundation.Bundle
      var sfSymbols: sfSymbols { .init(bundle: bundle) }

      func sfSymbols(bundle: Foundation.Bundle) -> sfSymbols {
        .init(bundle: bundle)
      }


      /// This `_R.image.icons.sfSymbols` struct is generated, and contains static references to 3 sfSymbolss.
      struct sfSymbols {
        let bundle: Foundation.Bundle

        /// Image `Icons/SF Symbols/camera`.
        var camera: RswiftResources.ImageResource { .init(name: "Icons/SF Symbols/camera", path: ["Icons", "SF Symbols"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Icons/SF Symbols/multiply`.
        var multiply: RswiftResources.ImageResource { .init(name: "Icons/SF Symbols/multiply", path: ["Icons", "SF Symbols"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

        /// Image `Icons/SF Symbols/square.and.arrow.up`.
        var squareAndArrowUp: RswiftResources.ImageResource { .init(name: "Icons/SF Symbols/square.and.arrow.up", path: ["Icons", "SF Symbols"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
      }
    }

    /// This `_R.image.logotype` struct is generated, and contains static references to 1 logotypes.
    struct logotype {
      let bundle: Foundation.Bundle

      /// Image `Logotype/Full`.
      var full: RswiftResources.ImageResource { .init(name: "Logotype/Full", path: ["Logotype"], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
    }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
      }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}